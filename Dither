#define SCREEN_WIDTH  128
#define SCREEN_HEIGHT 128 // Change this to 96 for 1.27" OLED.


// You can use any (4 or) 5 pins
// #define MOSI_PIN 2
// #define SCLK_PIN 3
// #define CS_PIN   4
// #define DC_PIN   5
// #define RST_PIN  6




#define MOSI_PIN 11
#define SCLK_PIN 13
#define CS_PIN   10
#define DC_PIN   12
#define RST_PIN  9


// Color definitions
//#define BLACK           0x0000
// #define WHITE           0xFFFF
// #define GREEN           0x1CEA
// #define BETTERGREEN     0x3C2A
// #define YELLOW          0xF5A7


#include <Adafruit_GFX.h>
#include <Adafruit_SSD1351.h>
#include <SPI.h>
#include <ssd1351.h>


// Option 1: use any pins but a little slower
// Adafruit_SSD1351 tft = Adafruit_SSD1351(SCREEN_WIDTH, SCREEN_HEIGHT, CS_PIN, DC_PIN, MOSI_PIN, SCLK_PIN, RST_PIN);  


//typedef ssd1351::LowColor Color;
typedef ssd1351::HighColor Color;


// Choose display buffering - NoBuffer or SingleBuffer currently supported
// auto display = ssd1351::SSD1351<Color, ssd1351::NoBuffer, 128, 96>();
auto display = ssd1351::SSD1351<Color, ssd1351::SingleBuffer, 128, 128>(CS_PIN, DC_PIN, RST_PIN, MOSI_PIN, SCLK_PIN);






const int numRows = 64;   // Number of rows in the 2D array
const int numCols = 64;   // Number of columns in the 2D array


byte left = 18;
byte down = 18;


byte leftR = 24;
byte downB = 24;


 Color circleColor = ssd1351::RGB(90, 128, 255);
  Color WHITE = ssd1351::RGB(255, 255, 255);
 Color BLACK = ssd1351::RGB(0, 0, 0);




byte myArray[numRows][numCols]; // Declare the 2D array


void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);


 display.begin();
 
   //display.fillScreen(circleColor);
}


void loop() {
   unsigned long before = millis();
  // put your main code here, to run repeatedly:
  fillArrayWithCross();
  dither();
  drawpixels();


display.updateScreen();
Serial.println(millis() - before);
}


void fillArrayWithCross() {
  for (int y = 0; y < numRows; y++) {
    for (int x = 0; x < numCols; x++) {
      // Generate a random value (either 0 or 1)
      if(y > 29 && y < 35 && x < 64 ||
         x > 29 && x < 35 && y < 64)
         {
  myArray[x][y] = 3;


         }
      else{  myArray[x][y] = 1;}
    }
  }
}


void dither() {
   static byte count = 0;
   static byte leftVel = 1;
   static byte downVel = 2;


  for (int i = 0; i < numRows-leftR; i++) {
    for (int j = 0; j < numCols- downB ; j++) {
      // Generate a random value (either 0 or 1)


          if(i> left && j >down){
      byte randomValue = random(4);
 if(randomValue >= myArray[i][j]){


  myArray[i][j] = 0;
 }
 else{  myArray[i][j] = 2; }




    }
  }


  }






 count++;


 if (count  > 5){
  if (leftR <= 0 or left <= 0){


    leftVel = leftVel *-1;
  }
    if (downB <= 0 or down <= 0){


    downVel = downVel *-1;
  }
  count = 0;
  left = left + leftVel;
  leftR = leftR - leftVel;


  down = down + downVel;
  downB = downB - downVel;
 
 
  }
}
void drawpixels(){


  for (int i = 0; i  < numRows; i++) {
    for (int j = 0; j  < numCols; j++) {
      // Print the value at the current position in the array
 
      if(myArray[i][j]>1){
               // display.fillRect(i*2,j *2, -2 , -2, circleColor);
                display.drawPixel(i * 2 , j * 2 , WHITE);
                  display.drawPixel(i * 2-1 , j * 2-1 , WHITE);
                  display.drawPixel(i * 2 , j * 2-1 , WHITE);
                  display.drawPixel(i * 2-1 , j * 2 , WHITE);
      }


      else{
       // display.fillRect(i*2,j *2, -2 , -2, BLACK);
        display.drawPixel(i * 2 , j * 2 , BLACK);
          display.drawPixel(i * 2 -1, j * 2 -1, BLACK);
          display.drawPixel(i * 2 , j * 2 -1, BLACK);
          display.drawPixel(i * 2 -1, j * 2 , BLACK);
      }
 
    }
   }


 delay(10);
}



